{
    "contents" : "## Supporting functions for Shiny App\n\n# Plot function for server ------------------\nplot4server  <- function(dat, param, distr.index = 1) {\n  # plot fitted probability density function to estimated empirical pdf\n  # Returns nothing, saves nothing\n  xmax <- max(dat)*1.2\n  x <- seq(0, xmax, xmax / 100)\n  distr <- distr.name[distr.index]\n  \n  # Distribution specific y vector\n  # PB: there is some logic erro with the NA management here. The app works, but this could be improved\n  if(distr.index == 1 && all(is.na(param)) == FALSE)   y <- dgumbel(x, param[1], param[2])\n  if(distr.index == 2 && all(is.na(param)) == FALSE)    y <- dgamma(x, param[1], param[2])\n  if(distr.index == 3 && all(is.na(param)) == FALSE)      y <- evd::dgev(x, param[1], param[2], param[3]) \n  if(distr.index == 4 && all(is.na(param)) == FALSE)       y <- f.genlogis(x, param[1], param[2], param[3])\n  if(distr.index == 5 && all(is.na(param)) == FALSE)  y <- f.gamma(x, param[1], param[2], param[3])\n  \n  ymax <- max( max(na.omit(y)), max(na.omit(density(dat)$y)) ) * 1.1\n  \n  # Plotting input dat, this is common to all distributions\n  hist(dat, xlab = \"Flood discharge (m3/s)\",ylab = \"Probability density\",freq = FALSE, \n       breaks = seq(0, xmax, xmax / 15), col = \"gray\", main = NULL, xlim = c(0, xmax), ylim = c(0, ymax))  \n  par(new = TRUE)\n  plot(x, y, xlim = c(0, xmax), ylim = c(0, ymax), type = \"l\", lwd = 2, col = \"black\", xlab = \"\", ylab = \"\")\n  par(new = TRUE)\n  plot(density(dat), main = \"Density distribution and data histogramm\",\n       xlim = c(0, xmax), ylim = c(0, ymax), lty = 1, lwd = 3, col = \"blue\", xlab = \"\", ylab = \"\")\n  \n  legend(\"topright\", inset = .05, c(\"Model\",\"Empirical\" ), col = c(\"black\",\"blue\"),lty = c(1, 1),lwd=c(2, 3), \n         merge = TRUE, bg = \"gray90\")\n}\n\nplot4server_rlevel <- function(dat, param, distr.index = 1) {    \n  # Plot return levels\n  # Returns nothing, saves nothing  \n  \n  # Common to all distributions\n  xmin <- min(dat)\n  xmax <- max(dat)*1.5\n  y <- seq(xmin, xmax, length = 100)\n  empq <- sort(dat)\n  \n  # The x vector is distribution specific\n  if(distr.index == 1) {\n    x <- 1 / (1 - pgumbel(y, param[1], param[2]))\n    # empT <- 1/(1-(seq(1:length(empq))-0.44)/(length(empq))+0.12) # Gringorten, optimized for the gumbel distribution\n    empT <- 1/(1 - (seq(1:length(empq)) - 0.50) / (length(empq)))   # Hazen, a traditional choice\n  }\n  if(distr.index == 2) {\n    x <- 1 / (1 - pgamma(y, param[1], param[2]))\n    empT <- 1/(1 - (seq(1:length(empq)) - 0.50) / (length(empq)))   # Hazen, a traditional choice\n  }\n  if(distr.index == 3)  {\n    x <- 1 / (1 - evd::pgev(y, param[1], param[2], param[3]))  # initially evd::pgev # also tried nsRFA::F.GEV\n    # empT <- 1/(1-(seq(1:length(empq))-0.44)/(length(empq))+0.12) # Gringorten, optimized for the gumbel distribution\n    empT <- 1/(1 - (seq(1:length(empq)) - 0.50) / (length(empq)))   # Hazen, a traditional choice\n  }\n  if(distr.index == 4)   { \n    x <- 1 / (1 - F.genlogis(y, param[1], param[2], param[3]))\n    # empT <- 1/(1-(seq(1:length(empq))-0.35)/(length(empq)))  # APL\n    empT <- 1/(1 - (seq(1:length(empq)) - 0.50) / (length(empq)))   # Hazen, a traditional choice\n  }\n  if(distr.index == 5) { \n    x <- 1/(1 - nsRFA::F.gamma(y, param[1], param[2], param[3]))\n    empT <- 1 / (1 - (seq(1:length(empq)) - 0.50) / (length(empq)))   # Hazen, a traditional choice\n  }\n  \n  # xaxt=\"n\" is to not plot the x axis ticks, as I specify them later\n  plot(log(log(x)), y, xlim = c(0, log(log(1000))), xaxt = \"n\", ylim = c(0, xmax),  \n       main = \"Return levels\", xlab = \"Return period (years)\", ylab = \"Flood discharge (m3/s)\",type = \"l\",lwd = 2)\n  tix <- c(5, 10, 20, 50, 100, 200, 500)\n  axis(1, at = log(log(tix)), labels = tix)\n  \n  # plot empirical dat points    \n  points(log(log(empT)), empq, pch = 16, col = \"blue\")\n  grid(nx = 7, ny = 10, lwd = 2) # grid only in y-direction\n  \n}\n\n\nplot4server_cdf  <- function(dat, param, distr = 1) {\n  # Plot estimated and empirical cumulative distribution function\n  # Returns nothing, saves nothing\n  \n  xmax <- max(dat)*1.2\n  x <- seq(0, xmax, xmax / 100)\n  \n  # Distribution specific y vector\n  if(distr == 1) y <- pgumbel(x, param[1], param[2])\n  if(distr == 2)  y <- pgamma(x, param[1], param[2])\n  if(distr == 3)    y <- evd::pgev(x, param[1], param[2], param[3])\n  if(distr == 4)     y <- F.genlogis(x, param[1], param[2], param[3])\n  if(distr == 5) y <- F.gamma(x, param[1], param[2], param[3])\n  \n  \n  plot(ecdf(dat), main = \"Cumulative density function\", xlim = c(0, xmax), ylim = c(0, 1), \n       xlab = \"\", ylab = \"\", lty = 21, col = \"blue\")\n  par(new = TRUE)\n  plot(x, y, xlim = c(0, xmax), ylim = c(0, 1),\n       type = \"l\",lwd = 2, col = \"black\", xlab = \"Flood discharge (m3/s)\", ylab = \"Cumulative probability\")\n}  \n\n\nplot4server_qq  <- function(dat, param, distr = 1) { \n  # QQ plot of empiricial against modelled \n  # Returns nothing, saves nothing\n  \n  # Compute plotting position \n  # pvalues <-(seq(1:length(dat))-0.35)/length(dat) # APL\n  p.values <- (seq(1:length(dat)) - 0.5) / length(dat)   # Hazen, a traditional choice\n  y <- sort(dat)\n  \n  if(distr == 1)  x <- sort(evd::rgumbel(p.values, param[1], param[2]))\n  if(distr == 2) {\n    # pvalues <- (seq(1:length(dat))-0.44)/(length(dat)+0.12) # Gringorten, optimized for the gumbel distribution\n    x <- sort(stats::rgamma(p.values, param[1], param[2]))\n  }\n  if(distr == 3) {\n    # pvalues <- (seq(1:length(dat))-0.44)/(length(dat)+0.12) # Gringorten, optimized for the gumbel distribution\n    x <- sort(evd::rgev(p.values, param[1], param[2], param[3]))  # initially evd::rgev  # also tried nsRFA::invF.GEV\n  }\n  if(distr == 4)     x <- sort(invF.genlogis(p.values, param[1], param[2], param[3]))  # PB shouldnt it be rand.genlogis ?\n  if(distr == 5) x <- sort(rand.gamma(p.values, param[1], param[2], param[3]))  \n  \n  if (length(x) == length(y)) {\n    plot(x, y, ylab = \"Empirical flood dischare (m3/s)\", xlab = \"Modelled flood dischare (m3/s)\", \n         main = \"Quantile-Quantile Plot\", pch = 16, col = \"blue\")\n    par(new = TRUE)\n    abline(0, 1, lwd = 2, col = \"black\") \n  } else {\n    plot(1,1)\n    legend(\"topright\", inset = .05, \"Missing or wrong data for the record length\", bty = \"n\", bg = \"gray90\", cex = 1.2)\n  }\n  \n}\n\nplot4server_gof  <- function(station, gof) { \n  \n  par(mfrow = c(3, 3), oma=c(0, 0, 0, 0), cex = 1.2)\n  par(mar = c(4, 4, 2, 0))  # c(bottom, left, top, right)\n  ## First subplot\n  # d <- 1  # gumbel\n  for (d in seq(along = distr.name)) {\n    \n    temp2plot <- array(NA, dim = c(3, length(sampling_years)))\n    distr <- distr.name[d]\n    \n    for (m in 1:3) {\n      method <- method.name[m] \n      temp2plot[m, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1), \n                                   count = c(1, 1, 1, length(sampling_years), 1))\n \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ])) \n      \n      \n      \n      plot(temp2plot[1, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (d == 1 || d == 4) {\n        plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \"))\n      } else {\n        plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \")) \n      }\n      legend(\"topright\", inset = .05, c(\"Maximum likelihood\", \"L-moments\", \"Ordinary moments\" ), bty = \"n\",\n             col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1), lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\", cex = 1.2)  \n      tix <- sampling_years\n      axis(1, at = c(1:length(sampling_years)), labels = tix)\n      \n    } else {\n      frame()\n      frame()\n      frame()\n      frame()\n      frame()\n    }\n    \n  }\n  frame()  # We fill the 6th plot with a blank plot\n  legend(\"center\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n         col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),\n         lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\")    \n  \n  ## Now we vary distr in each plot\n  for (m in 1:3) {\n    method <- method.name[m] \n    temp2plot <- array(NA, dim = c(5, length(sampling_years)))\n    \n    for (d in seq(along = distr.name)) {\n      \n      distr <- distr.name[d]\n      temp2plot[d, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1), \n                                   count = c(1, 1, 1, length(sampling_years), 1))\n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))     \n      \n      plot(temp2plot[1, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"orange\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[4, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"green\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (m == 1) {\n        plot(temp2plot[5, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      } else {\n        plot(temp2plot[5, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      }\n      \n      tix <- sampling_years\n      axis(1, at = c(1:length(sampling_years)), labels = tix)\n      \n    } else {\n      frame()\n      frame()\n      frame()\n    }\n  }\n}\n\nplot4server_gof.rlevels  <- function(station, gof, r.period) { \n  \n  print(gof)\n  if (gof == \"BS\") {\n    r.period.index <- which(rperiods.bs == r.period)  \n  } else {r.period.index <- which(return.periods == r.period)}\n  \n  par(mfrow = c(3, 3), oma=c(0, 0, 0, 0), cex = 1.2)\n  par(mar = c(4, 4, 2, 0))  # c(bottom, left, top, right)\n  ## First subplot\n  # d <- 1  # gumbel\n  for (d in seq(along = distr.name)) {\n    \n    temp2plot <- array(NA, dim = c(3, length(sampling_years)))\n    distr <- distr.name[d]\n    \n    for (m in 1:3) {\n      method <- method.name[m] \n      temp2plot[m, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1, r.period.index),\n                                   count = c(1, 1, 1, length(sampling_years), 1, 1)) \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))   \n      \n      plot(temp2plot[1, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (d == 1 || d == 4) {\n        plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \"))\n      } else {\n        plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \")) \n      }\n      \n      legend(\"topright\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n             col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n      tix <- sampling_years\n      axis(1, at = c(1:length(sampling_years)), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n      frame()\n      frame()\n    }\n  }\n  frame()   # We fill the 6th plot with a blank plot\n  #   legend(\"topleft\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n  #          col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  legend(\"center\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n         col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  \n  \n  ## Now we vary distr in each plot\n  for (m in 1:3) {\n    method <- method.name[m] \n    temp2plot <- array(NA, dim = c(5, length(sampling_years)))\n    for (d in seq(along = distr.name)) {\n      \n      distr <- distr.name[d]\n      temp2plot[d, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1, r.period.index),\n                                   count = c(1, 1, 1, length(sampling_years), 1, 1)) \n      \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))    \n      \n      plot(temp2plot[1, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"orange\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[4, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"green\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (m ==1) {\n        plot(temp2plot[5, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      } else {\n        plot(temp2plot[5, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      }\n      #    legend(\"topright\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n      #              col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\")  \n      tix <- sampling_years\n      axis(1, at = c(1:length(sampling_years)), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n    }\n  }\n}\n\n####################\nplot4server_nt  <- function(station, gof, r.period) { \n  \n  r.period.index <- which(rperiods.bs == r.period)  \n  \n  \n  par(mfrow = c(3, 3), oma=c(0, 0, 0, 0), cex = 1.2)\n  par(mar = c(4, 4, 2, 0))  # c(bottom, left, top, right)\n  ## First subplot\n  # d <- 1  # gumbel\n  for (d in seq(along = distr.name)) {\n    \n    temp2plot <- array(NA, dim = c(3, length(sampling_years)))\n    distr <- distr.name[d]\n    \n    for (m in 1:3) {\n      method <- method.name[m] \n      temp2plot[m, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, r.period.index),\n                                   count = c(1, 1, 1, length(sampling_years), 1)) \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))   \n      \n      plot(temp2plot[1, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (d == 1 || d == 4) {\n        plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \"))\n      } else {\n        plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \")) \n      }\n      \n      legend(\"topright\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n             col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n      tix <- sampling_years\n      axis(1, at = c(1:length(sampling_years)), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n      frame()\n      frame()\n    }\n  }\n  frame()   # We fill the 6th plot with a blank plot\n  #   legend(\"topleft\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n  #          col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  legend(\"center\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n         col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  \n  \n  ## Now we vary distr in each plot\n  for (m in 1:3) {\n    method <- method.name[m] \n    temp2plot <- array(NA, dim = c(5, length(sampling_years)))\n    for (d in seq(along = distr.name)) {\n      \n      distr <- distr.name[d]\n      temp2plot[d, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, r.period.index),\n                                   count = c(1, 1, 1, length(sampling_years), 1)) \n      \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))    \n      \n      plot(temp2plot[1, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[3, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"orange\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[4, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"green\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (m ==1) {\n        plot(temp2plot[5, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      } else {\n        plot(temp2plot[5, 1:length(sampling_years)], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      }\n      #    legend(\"topright\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n      #              col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\")  \n      tix <- sampling_years\n      axis(1, at = c(1:length(sampling_years)), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n    }\n  }\n}\n###########################\n\ngof_summary <- function(gof, station) {\n  \n  gof.table <- data.frame(gum = rep(NA,4), gam = rep(NA,4), gev = rep(NA,4), glo = rep(NA,4), pe3 = rep(NA,4))\n  # gof.table <- matrix(NA,4,5)\n  min.gof <- 100\n  max.gof <- 0\n  min.index <- c(NA, NA)\n  max.index <- c(NA, NA)\n  \n  row.names(gof.table) <- method.name\n  \n  for (m in seq(along = method.name)) {\n    for (d in seq(along = distr.name)) {\n      gof.table[m,d] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 30, 1),\n                                   count = c(1, 1, 1, 1, 1))  # in dataframe [row, column]\n      if (!is.na(gof.table[m,d])) {\n        if (gof.table[m,d] < min.gof) {\n          min.gof <- gof.table[m,d]\n          min.index <- c(m, d)\n        }\n        if (gof.table[m,d] > max.gof) {\n          max.gof <- gof.table[m,d]\n          max.index <- c(m, d)\n        }\n        \n      }\n      gof.table[m,d] <- round(gof.table[m,d], 4)\n    }\n  }\n  \n  min.gof <- round(min.gof, 4)\n  \n  max.gof <- round(max.gof, 4)\n  \n  results <- list(min_gof = min.gof, min_index = min.index, max_gof = max.gof, max_index = max.index, gof_table = gof.table)\n  invisible(results)  \n}\n\n\ngof_summary_rperiods <- function(gof, station, r.period) {\n  \n  r.period.index <- which(return.periods == r.period)\n  gof.table <- data.frame(gum = rep(NA,4), gam = rep(NA,4), gev = rep(NA,4), glo = rep(NA,4), pe3 = rep(NA,4))\n  row.names(gof.table) <- method.name\n  for (m in seq(along = method.name)) {\n    for (d in seq(along = distr.name)) {\n      gof.table[m,d] <- round(var.get.nc(gof_nc, gof, start = c(station, d, m, 30, 1, r.period.index),\n                                         count = c(1, 1, 1, 1, 1, 1)), 0)  # in dataframe [row, column]\n    }\n  }\n  invisible(gof.table)\n  \n}\n\n# MAP OF NORWAY WITH COLOR CHANGING ACCORDING TO THE NUMBER OF DATA.\nnorway_map4server <- function(selected.station) {\n  library(leaflet)\n  library(magrittr)\n  \n  st.index <- which(station$number == selected.station)\n  st.name <- station$name[st.index]\n  st.long <- station$long[st.index]\n  st.lat <- station$lat[st.index]\n  st.length_rec <- station$length_rec[st.index]\n  \n  #   pal <- colorNumeric(\n  #     palette = heat.colors(5),\n  #     domain = c(0,30,60,90,120,150))\n  # qpal <- colorQuantile(\"RdYlBu\", length.bins, n = 5)\n  \n  my.colors <- c(\"black\", \"red\", \"orange\", \"green\", \"blue\")\n  \n  my.color.func <- function(x2plot, my.colors) {\n    color.bins <- c(0,30,60,90,120,150)\n    color <- my.colors[trunc(x2plot/30)+1]\n    invisible(color)\n  }\n  \n  \n  map <- leaflet() %>% addTiles()\n  setView(map, 13, 64, zoom = 5) \n  \n  addCircleMarkers(map, data = station, lng = ~ long, lat = ~ lat, \n                   popup = paste(\"Name:\", as.character(station$name), \"Number:\", station$number,\n                                 \"Length of record:\", station$length_rec, sep = \" \"), radius = 5, \n                   color = ~my.color.func(station$length_rec, my.colors), stroke = FALSE, fillOpacity = 0.5,\n                   layerId = station$number) %>%\n    \n    addPopups(st.long, st.lat, paste(\"Name:\", as.character(st.name), \"Number:\", selected.station,\n                                     \"Length of record:\", st.length_rec, sep = \" \"),\n              options = popupOptions(closeButton = FALSE, maxWidth = 100)) %>%\n    \n    addLegend(position = \"bottomright\", colors = my.colors, labels = c(\"0-30\", \"30-60\", \"60-90\", \"90-120\", \"120-150\"),\n              title = \"Length of flood record (years)\",\n              opacity = 1)\n  \n}\n\n\nnorway_map4groups <- function(group.index) {\n  library(leaflet)\n  library(magrittr)\n  \n  group.name <- station$name[group.index]\n  group.nve_nb <- station$nve_nb[group.index]\n  group.long <- station$long[group.index]\n  group.lat <- station$lat[group.index]\n  group.length_rec <- station$length_rec[group.index]\n  \n  my.colors <- c(\"black\", \"red\", \"orange\", \"green\", \"blue\")\n  \n  my.color.func <- function(x2plot, my.colors) {\n    color.bins <- c(0,30,60,90,120,150)\n    color <- my.colors[trunc(x2plot/30)+1]\n    invisible(color)\n  }\n  \n  \n  map <- leaflet() %>% addTiles()\n  setView(map, 13, 64, zoom = 5) \n  \n  addCircleMarkers(map, data = station, lng = ~ long, lat = ~ lat, \n                   popup = paste(\"Name:\", as.character(station$name), \"Number:\", station$nve_nb,\n                                 \"Length of record:\", station$length_rec, sep = \" \"),\n                   radius = 5, \n                   color = ~my.color.func(station$length_rec, my.colors), stroke = FALSE, fillOpacity = 0.5) %>%\n    \n    addMarkers(group.long, group.lat, popup = paste(\"Name:\", as.character(group.name), \"Number:\", group.nve_nb,\n                                                    \"Length of record:\", group.length_rec, sep = \" \")) %>%\n    \n    #     addPopups(group.long, group.lat, \n    #                paste(\"gev\"),\n    #               options = popupOptions(closeButton = FALSE, maxWidth = 1)) \n    \n    addLegend(position = \"bottomright\", colors = my.colors, labels = c(\"0-30\", \"30-60\", \"60-90\", \"90-120\", \"120-150\"),\n              title = \"Length of flood record (years)\",\n              opacity = 1)\n  \n}\n\n\n# Function to calculate the indexes of a group of common stations\nbestgof.indexing <- function(gof, minmax) {\n  \n  bestgof.indexes <- matrix(NA,length(station$index),2)\n  \n  # Caution: station$index is required when reading the NetCDF files as we need to get back to the whole set of stations (445)\n  for (st in seq(along = station$index)) {\n    \n    temp.list <- gof_summary(gof, station$index[st])\n    if (minmax == \"min\") {\n      bestgof.indexes[st,] <- temp.list$min_index\n    }\n    if (minmax == \"max\") {\n      bestgof.indexes[st,] <- temp.list$max_index\n    } \n    \n    \n  }\n  invisible(bestgof.indexes)\n}\n\n# This function extracts from the matrix created above, the station indexes corresponding to the user's choices\nstation_group_indexes <- function(gof, distr, method, minmax) {\n  \n  group.indexes <- rep(NA,length(station$number))\n  bestgof.indexes <- bestgof.indexing(gof, minmax)\n  \n  if (distr == \"ALL\" && method != \"ALL\") {\n    m <- which(method.name == method)\n    group.indexes <- intersect(seq(1,length(station$number)), which(bestgof.indexes[,1] == m))  \n    \n  }\n  if (distr != \"ALL\" && method == \"ALL\") {\n    d <- which(distr.name == distr)\n    group.indexes <- intersect(seq(1,length(station$number)), which(bestgof.indexes[,2] == d))\n  }\n  if (distr == \"ALL\" && method == \"ALL\") {\n    group.indexes <- seq(1,length(station$number))\n  }\n  if (distr != \"ALL\" && method != \"ALL\") {\n    \n    d <- which(distr.name == distr)\n    m <- which(method.name == method)\n    \n    group.indexes <- intersect(which(bestgof.indexes[,2] == d), which(bestgof.indexes[,1] == m))  \n  }\n  invisible(group.indexes)\n}\n\n# Function for updating the df to put in the interactive table\ngroup.dfmaker <- function(group.indexes) {\n  \n  group.df <- data.frame(\"Station name\" = station$name[group.indexes], \n                         \"NVE number\" = station$nve_nb[group.indexes],\n                         \"Length of record\" = station$length_rec[group.indexes])\n  \n  invisible(group.df)\n}\n\nstations2average <- function(min_years, max_years) {\n  \n  stations2ave <- c()\n  print(\"entered the station2avergae function\")\n  print(min_years)\n  print(max_years)\n  \n  print(class(max_years))\n  \n  min_years <- as.numeric(min_years)\n  max_years <- as.numeric(max_years)\n  \n  print(class(max_years))\n  \n  for (st in seq(along = station$index)) {\n    if (station$length_rec[st] >= min_years) {\n      if (station$length_rec[st] <= max_years) {\n        stations2ave <- c(stations2ave, st)\n        print(\"prout1\")\n        \n      }\n    }\n  }\n  \n  invisible(stations2ave)\n}\n\n\n# function like plot4server_gof but averaging over all stations filling the min/max years criteria\nplot4server_gof_averaged  <- function(gof, min_years, max_years) { \n  \n  # adding a new stations2ave index for the averaging\n  stations2ave <- c()\n  \n  print(\"entered the plotting function\")\n  print(min_years)\n  print(max_years)\n  stations2ave <- stations2average(min_years, max_years)\n  print(stations2ave)  # for debugging\n  print(\"prout2\")\n  \n  par(mfrow = c(3, 3), oma=c(0, 0, 0, 0), cex = 1.2)\n  par(mar = c(4, 4, 2, 0))  # c(bottom, left, top, right)\n  ## First subplot\n  # d <- 1  # gumbel\n  #  maxindex2plot <- length(sampling_years) \n  maxindex2plot <- 15\n  \n  for (d in seq(along = distr.name)) {\n    \n    temp2plot <- array(NA, dim = c(3, length(sampling_years)))\n    temp2plot_raw <- array(NA, dim = c(length(stations2ave), 3, length(sampling_years)))\n    distr <- distr.name[d]\n    \n    for (m in 1:3) {  # To fix for Bayes\n      method <- method.name[m] \n      \n      # average over all stations that have more than 60 years of data\n      #           temp2plot[m, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1), \n      #                                        count = c(1, 1, 1, length(sampling_years), 1))  \n      \n      \n      for (st in seq(along = stations2ave)) {\n        \n        temp2plot_raw[st, m, ] <- var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, 1), \n                                             count = c(1, 1, 1, length(sampling_years), 1)) \n      }\n      temp2plot[m, ] <- colMeans(temp2plot_raw[, m, ], na.rm = TRUE) \n      \n      \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- maxindex2plot \n      \n      \n      \n      plot(temp2plot[1, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (d == 1 || d == 4) {\n        plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \"))\n      } else {\n        plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \")) \n      }\n      legend(\"topright\", inset = .05, c(\"Maximum likelihood\", \"L-moments\", \"Ordinary moments\" ), bty = \"n\",\n             col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1), lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\", cex = 1.2)  \n      tix <- sampling_years[1:maxindex2plot]\n      axis(1, at = c(1:maxindex2plot), labels = tix)\n      \n    } else {\n      frame()\n      frame()\n      frame()\n      frame()\n      frame()\n    }\n    rm(temp2plot)\n    rm(temp2plot_raw)\n  }\n  frame()  # We fill the 6th plot with a blank plot\n  legend(\"center\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n         col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),\n         lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\")    \n  \n  ## Now we vary distr in each plot\n  for (m in 1:3) {\n    method <- method.name[m] \n    temp2plot <- array(NA, dim = c(5, length(sampling_years)))\n    temp2plot_raw <- array(NA, dim = c(length(stations2ave), 5, length(sampling_years)))\n    \n    for (d in seq(along = distr.name)) {\n      \n      distr <- distr.name[d]\n      #       \n      #       temp2plot[d, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1), \n      #                                    count = c(1, 1, 1, length(sampling_years), 1))\n      \n      for (st in seq(along = stations2ave)) {\n        temp2plot_raw[st, d, ] <- var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, 1), \n                                             count = c(1, 1, 1, length(sampling_years), 1)) \n      }\n      \n      temp2plot[d, ] <- colMeans(temp2plot_raw[, d, ], na.rm = TRUE) \n      \n      # print(temp2plot)\n      \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- maxindex2plot     \n      \n      plot(temp2plot[1, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"orange\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[4, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"green\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (m == 1) {\n        plot(temp2plot[5, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      } else {\n        plot(temp2plot[5, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      }\n      \n      tix <- sampling_years[1:maxindex2plot]\n      axis(1, at = c(1:maxindex2plot), labels = tix)\n      \n    } else {\n      frame()\n      frame()\n      frame()\n    }\n  }\n}\n\n\nplot4server_rlevels_coeffvar  <- function(station, gof, r.period) { \n  \n  print(gof)\n  print(station)\n  print(r.period)\n  maxindex2plot <- length(sampling_years)\n  \n  \n  if (gof == \"BS\") {\n    r.period.index <- which(rperiods.bs == r.period)  \n  } else {r.period.index <- which(return.periods == r.period)}\n  \n  par(mfrow = c(3, 3), oma=c(0, 0, 0, 0), cex = 1.2)\n  par(mar = c(4, 4, 2, 0))  # c(bottom, left, top, right)\n  ## First subplot\n  # d <- 1  # gumbel\n  for (d in seq(along = distr.name)) {\n    \n    temp2plot <- array(NA, dim = c(3, length(sampling_years)))\n    distr <- distr.name[d]\n    \n    for (m in 1:3) {\n      method <- method.name[m] \n      # coefficient of variation = st_dev / mean\n      temp2plot[m, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 2, r.period.index),\n                                   count = c(1, 1, 1, length(sampling_years), 1, 1)) /\n        var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1, r.period.index),\n                   count = c(1, 1, 1, length(sampling_years), 1, 1))\n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))   \n      \n      plot(temp2plot[1, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (d == 1 || d == 4) {\n        plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \"))\n      } else {\n        plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \")) \n      }\n      \n      legend(\"topright\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n             col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n      tix <- sampling_years[1:maxindex2plot]\n      axis(1, at = c(1:maxindex2plot), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n      frame()\n      frame()\n    }\n  }\n  frame()   # We fill the 6th plot with a blank plot\n  legend(\"center\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n         col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  \n  \n  ## Now we vary distr in each plot\n  for (m in 1:3) {\n    method <- method.name[m] \n    temp2plot <- array(NA, dim = c(5, length(sampling_years)))\n    for (d in seq(along = distr.name)) {\n      \n      distr <- distr.name[d]\n      # again coefficient of variation\n      temp2plot[d, ] <- var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 2, r.period.index), \n                                   count = c(1, 1, 1, length(sampling_years), 1,1)) /\n        var.get.nc(gof_nc, gof, start = c(station, d, m, 1, 1, r.period.index), \n                   count = c(1, 1, 1, length(sampling_years), 1,1))\n      \n    }\n    if (all(is.na(temp2plot)) == FALSE) {\n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- length(na.omit(temp2plot[1, ]))    \n      \n      plot(temp2plot[1, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"orange\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[4, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"green\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (m ==1) {\n        plot(temp2plot[5, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      } else {\n        plot(temp2plot[5, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      }\n      #    legend(\"topright\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n      #              col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\")  \n      tix <- sampling_years[1:maxindex2plot]\n      axis(1, at = c(1:maxindex2plot), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n    }\n  }\n}\n\n\nplot4server_rlevels_coeffvar_ave  <- function(gof, r.period, min_years, max_years) { \n  \n  \n  stations2ave <- stations2average(min_years, max_years)\n  maxindex2plot <- 15\n  \n  print(gof)\n  print(r.period)\n  if (gof == \"BS\") {\n    r.period.index <- which(rperiods.bs == r.period)  \n  } else {r.period.index <- which(return.periods == r.period)}\n  \n  par(mfrow = c(3, 3), oma=c(0, 0, 0, 0), cex = 1.2)\n  par(mar = c(4, 4, 2, 0))  # c(bottom, left, top, right)\n  ## First subplot\n  # d <- 1  # gumbel\n  \n  \n  \n  for (d in seq(along = distr.name)) {\n    \n    temp2plot <- array(NA, dim = c(3, length(sampling_years)))\n    temp2plot_raw <- array(NA, dim = c(length(stations2ave), 3, length(sampling_years)))\n    distr <- distr.name[d]\n    \n    for (m in 1:3) {  # TO FIX for Bayes\n      method <- method.name[m] \n      \n      for (st in seq(along = stations2ave)) {\n        \n        if (gof == \"NT\") {\n          temp2plot_raw[st, m, ] <- var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, r.period.index), \n                                               count = c(1, 1, 1, length(sampling_years), 1))\n          \n          \n        } else {\n          # coefficient of variation = st_dev / mean\n          temp2plot_raw[st, m, ] <- var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, 2, r.period.index), \n                                               count = c(1, 1, 1, length(sampling_years), 1, 1)) /\n            var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, 1, r.period.index), \n                       count = c(1, 1, 1, length(sampling_years), 1, 1))\n          \n        }\n        \n        \n      }\n      temp2plot[m, ] <- colMeans(temp2plot_raw[, m, ], na.rm = TRUE) \n    }\n    \n    \n    \n    if (all(is.na(temp2plot)) == FALSE) {\n      \n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- maxindex2plot   \n      \n      plot(temp2plot[1, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (d == 1 || d == 4) {\n        plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \"))\n      } else {\n        plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"\", main = paste(gof,\"for\", distr, sep = \" \")) \n      }\n      \n      legend(\"topright\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n             col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n      tix <- sampling_years[1:maxindex2plot]\n      axis(1, at = c(1:maxindex2plot), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n      frame()\n      frame()\n    }\n  }\n  frame()   # We fill the 6th plot with a blank plot\n  #   legend(\"topleft\", inset = .05, c(\"Maximum likelihood\",\"L-moments\", \"Ordinary moments\" ), cex = 1.2, bty = \"n\",\n  #          col = c(\"black\", \"red\",\"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  legend(\"center\", inset = .05, distr.name, cex = 1.2, bty = \"n\",\n         col = c(\"black\", \"red\", \"orange\", \"green\", \"blue\"),lty = c(1, 1, 1),lwd=c(3, 3, 3), merge = TRUE, bg = \"gray90\") \n  \n  \n  ## Now we vary distr in each plot\n  for (m in 1:3) {\n    method <- method.name[m] \n    temp2plot <- array(NA, dim = c(5, length(sampling_years)))\n    temp2plot_raw <- array(NA, dim = c(length(stations2ave), 5, length(sampling_years)))\n    for (d in seq(along = distr.name)) {\n      \n      distr <- distr.name[d]\n      # again coefficient of variation\n      for (st in seq(along = stations2ave)) {\n        \n        if (gof == \"NT\") {\n          \n          temp2plot_raw[st, d, ] <- var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, r.period.index), \n                                               count = c(1, 1, 1, length(sampling_years), 1)) \n          \n        } else {\n          temp2plot_raw[st, d, ] <- var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, 2, r.period.index), \n                                               count = c(1, 1, 1, length(sampling_years), 1, 1)) /\n            var.get.nc(gof_nc, gof, start = c(station$index[stations2ave[st]], d, m, 1, 1, r.period.index), \n                       count = c(1, 1, 1, length(sampling_years), 1, 1))     \n          \n        }\n        \n        \n      }\n      temp2plot[d, ] <- colMeans(temp2plot_raw[, d, ], na.rm = TRUE) \n    }\n    \n    if (all(is.na(temp2plot)) == FALSE) {\n      ymin <- min(temp2plot, na.rm = TRUE) * 0.9\n      ymax <- max(temp2plot, na.rm = TRUE) * 1.1\n      xmax <- maxindex2plot    \n      \n      plot(temp2plot[1, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n',\n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"black\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[2, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"red\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[3, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"orange\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      plot(temp2plot[4, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n           xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"green\",  ylab = \"\", xlab = \"\")\n      par(new =TRUE)\n      if (m ==1) {\n        plot(temp2plot[5, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = gof, xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      } else {\n        plot(temp2plot[5, 1:maxindex2plot], type = \"l\", lwd = 3, xaxt='n', \n             xlim = c(1, xmax), ylim = c(ymin, ymax), col = \"blue\",\n             ylab = \"\", xlab = \"Length of record\", main = paste(gof,\"for\", method, sep = \" \"))\n      }\n      tix <- sampling_years[1:maxindex2plot]\n      axis(1, at = c(1:maxindex2plot), labels = tix)\n    } else {\n      frame()\n      frame()\n      frame()\n    }\n  }\n}\n\n\n# length_dat <- vector(length = length(station.nb.vect))\n# \n# for (i in seq(along = station.nb.vect)) {\n#   sdat <- sdat_load(dat, station.nb.vect[i])\n#   length_dat[i] <- length(sdat$flom_DOGN)\n#   \n# }\n# hist(length_dat, breaks = 20 , xlab = \"Lenth of flood record\", ylab = \"Number of stations\", main= \"\", cex.lab = 1.5)\n# \n\n\n########################################## TEST OF BOX PLOT FOR ALL STATIONS THAT HAVE MORE THAN N data\nboxplot.param <- function(min_data, max_data) {\n  \n  \n  \n  flood_list <- list()\n  station_list <- c()\n  for (i in 1:length(station.nb.vect)) {\n    # assign(paste(\"sdat\",i,sep = \"\"), sdat_load(dat, station.nb.vect[i]) )\n    if (!is.null(sdat_load(dat, station.nb.vect[i]))) {\n      \n      flood_list[[i]] <- sdat_load(dat, station.nb.vect[i])$flom_DOGN / mean(na.omit(sdat_load(dat, station.nb.vect[i])$flom_DOGN))\n      station_list[i] <- as.character(sdat_load(dat, station.nb.vect[i])$name[1])\n    } else {\n      flood_list[[i]] <- NA\n      station_list[i] <- NA\n    }\n  }\n  to_plot <- c()\n  k <- 0\n  for (i in 1:length(station.nb.vect)) {\n    \n    if (length(flood_list[[i]]) > min_data && length(flood_list[[i]]) < max_data) {\n      k <- k+1\n      to_plot[k] <- i\n    }\n  }\n  \n  par(las = 1) # all axis labels horizontal\n  boxplot(flood_list[to_plot], names = station_list[to_plot], horizontal = TRUE, outwex = TRUE)\n  \n  max_vect <- colMaxs(flood_list[to_plot])\n  \n  boxplot(sort(flood_list[to_plot], decreasing = TRUE), horizontal = TRUE)\n  \n}\n",
    "created" : 1463041326812.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1714410372",
    "id" : "8315049B",
    "lastKnownWriteTime" : 1462878772,
    "path" : "~/GitHub/FlomKart_ShinyApp/R/global.R",
    "project_path" : "global.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}